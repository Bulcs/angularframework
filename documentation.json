{
    "pipes": [],
    "interfaces": [],
    "injectables": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-00fecf367b8bd8793aad23f863ca90e5",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "template": "<result [votes]=\"vote\"></result>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'angular-app'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "vote",
                    "defaultValue": "[{ 'option': 'Sim', 'count': 6 }, { 'option': 'Não', 'count': 2 }]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: '<result [votes]=\"vote\"></result>',\n  //templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  vote = [{ 'option': 'Sim', 'count': 6 }, { 'option': 'Não', 'count': 2 }];\n  title = 'angular-app';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-7df041e12db7c9d2cfa6647f1b653403",
            "file": "src/components/Button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "Button",
            "styleUrls": [
                "./style.css"
            ],
            "styles": [],
            "template": "<button\n  class=\"m5\"\n  *ngFor=\"let option of options; index as i\"\n  (click)=\"onVote.emit(i)\"\n>\n  {{ option }}\n</button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "options",
                    "line": 17,
                    "type": "string[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "onVote",
                    "defaultValue": "new EventEmitter<number>()",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'Button',\n  template: `\n    <button\n      class=\"m5\"\n      *ngFor=\"let option of options; index as i\"\n      (click)=\"onVote.emit(i)\"\n    >\n      {{ option }}\n    </button>\n  `,\n  styleUrls: ['./style.css'],\n})\nexport class ButtonComponent {\n  @Input() options!: string[];\n  @Output() onVote = new EventEmitter<number>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".m5 {\n  margin: 2px;\n}\n",
                    "styleUrl": "./style.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "ResultComponent",
            "id": "component-ResultComponent-227ca1575f9b013e85580ef18fdc9001",
            "file": "src/components/result.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "result",
            "styleUrls": [],
            "styles": [],
            "template": "<div>\n<p *ngFor=\"let vote of votes; index as i\">\n    {{i+1}}. {{vote.option}} - {{vote.count}} votes ({{vote.count * 100/total}}%)\n</p>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "votes",
                    "line": 15,
                    "type": "literal type[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "total",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'result',\n    template: `\n    <div>\n    <p *ngFor=\"let vote of votes; index as i\">\n        {{i+1}}. {{vote.option}} - {{vote.count}} votes ({{vote.count * 100/total}}%)\n    </p>\n    </div>\n  `\n})\n\nexport class ResultComponent {\n    @Input() votes!: { option: string; count: number; }[];\n    total = 0;\n    ngOnInit() {\n        for (var i = 0; i < this.votes.length; i++) {\n            this.total += this.votes[i].count;\n        }\n    }\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "VotingCardComponent",
            "id": "component-VotingCardComponent-f3837cc836d6f214fe9e04defaf92803",
            "file": "src/components/votingCard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "votingCard",
            "styleUrls": [
                "./style.css"
            ],
            "styles": [],
            "template": "<div class=\"votingCard\" *ngIf=\"state === 'open'; else results\">\n  <h3>{{ title }}</h3>\n  <Button [options]=\"options\" (onVote)=\"onVote($event)\"></Button>\n</div>\n<ng-template #results>\n  <div class=\"votingCard\">\n    <h3>{{ title }}</h3>\n    <result [votes]=\"votes\"></result>\n  </div>\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "state",
                    "line": 22,
                    "type": "string"
                },
                {
                    "name": "title",
                    "line": 20,
                    "type": "string"
                },
                {
                    "name": "votes",
                    "line": 21,
                    "type": "literal type[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "onVote",
                    "args": [
                        {
                            "name": "index",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'votingCard',\n  template: `\n    <div class=\"votingCard\" *ngIf=\"state === 'open'; else results\">\n      <h3>{{ title }}</h3>\n      <Button [options]=\"options\" (onVote)=\"onVote($event)\"></Button>\n    </div>\n    <ng-template #results>\n      <div class=\"votingCard\">\n        <h3>{{ title }}</h3>\n        <result [votes]=\"votes\"></result>\n      </div>\n    </ng-template>\n  `,\n  styleUrls: ['./style.css'],\n})\nexport class VotingCardComponent {\n  @Input() title!: string;\n  @Input() votes!: { option: string; count: number }[];\n  @Input() state!: string;\n  options: string[] = [];\n  ngOnInit() {\n    for (var i = 0; i < this.votes.length; i++) {\n      this.options[i] = this.votes[i].option;\n    }\n  }\n  onVote(index: number) {\n    this.state = 'close';\n    this.votes[index].count++;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".m5 {\n  margin: 2px;\n}\n",
                    "styleUrl": "./style.css"
                }
            ],
            "stylesData": ""
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "ResultComponent"
                        },
                        {
                            "name": "VotingCardComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "PrimaryResult",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Result.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "PrimaryVotingCardPage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/VotingCard.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "SecondaryVotingCardPage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/VotingCard.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<ButtonComponent>",
                "defaultValue": "(args: ButtonComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Result.stories.ts",
                "type": "Story<ResultComponent>",
                "defaultValue": "(args: ResultComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/VotingCard.stories.ts",
                "type": "Story<VotingCardComponent>",
                "defaultValue": "(args: VotingCardComponent) => ({\n  props: args,\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<ButtonComponent>",
                    "defaultValue": "(args: ButtonComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Result.stories.ts": [
                {
                    "name": "PrimaryResult",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Result.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Result.stories.ts",
                    "type": "Story<ResultComponent>",
                    "defaultValue": "(args: ResultComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/VotingCard.stories.ts": [
                {
                    "name": "PrimaryVotingCardPage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/VotingCard.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "SecondaryVotingCardPage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/VotingCard.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/VotingCard.stories.ts",
                    "type": "Story<VotingCardComponent>",
                    "defaultValue": "(args: VotingCardComponent) => ({\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/components/Button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/components/result.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ResultComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/components/votingCard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VotingCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Result.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrimaryResult",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Result.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/VotingCard.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrimaryVotingCardPage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/VotingCard.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SecondaryVotingCardPage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/VotingCard.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}